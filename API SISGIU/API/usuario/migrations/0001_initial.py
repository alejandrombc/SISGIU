# Generated by Django 2.0 on 2018-01-06 17:04

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import usuario.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_auto_20180106_1258'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('cedula', models.IntegerField(null=True, unique=True)),
                ('segundo_nombre', models.CharField(max_length=50, null=True)),
                ('segundo_apellido', models.CharField(max_length=50, null=True)),
                ('correo_alternativo', models.EmailField(blank=True, max_length=60)),
                ('celular', models.CharField(max_length=14)),
                ('telefono_casa', models.CharField(max_length=14)),
                ('telefono_trabajo', models.CharField(max_length=14)),
                ('fecha_nacimiento', models.DateField(default=datetime.date(2018, 1, 6))),
                ('sexo', models.CharField(max_length=1)),
                ('nacionalidad', models.CharField(max_length=20)),
                ('estado_civil', models.CharField(max_length=20)),
                ('foto', models.ImageField(upload_to=usuario.models.user_directory_path)),
            ],
            options={
                'verbose_name_plural': 'users',
                'abstract': False,
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EstadoEstudiante',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estado', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='TipoPostgrado',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Administrador',
            fields=[
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Estudiante',
            fields=[
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('direccion', models.TextField()),
                ('id_estado_estudiante', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='usuario.EstadoEstudiante')),
                ('id_tipo_postgrado', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='usuario.TipoPostgrado')),
            ],
        ),
        migrations.CreateModel(
            name='PersonalAdministrativo',
            fields=[
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PersonalDocente',
            fields=[
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('direcccion', models.TextField()),
                ('rif', models.FileField(upload_to=usuario.models.user_directory_path)),
                ('curriculum', models.FileField(upload_to=usuario.models.user_directory_path)),
                ('permiso_ingresos', models.FileField(upload_to=usuario.models.user_directory_path)),
                ('coordinador', models.BooleanField()),
            ],
        ),
        migrations.AddField(
            model_name='usuario',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='usuario',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
